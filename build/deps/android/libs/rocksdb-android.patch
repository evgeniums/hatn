Binary files rocksdb/.git/index and rocksdb.patched/.git/index differ
diff -ruN rocksdb/CMakeLists.txt rocksdb.patched/CMakeLists.txt
--- rocksdb/CMakeLists.txt	2024-03-01 22:46:33.000000000 +0300
+++ rocksdb.patched/CMakeLists.txt	2024-03-01 22:44:27.000000000 +0300
@@ -33,7 +33,7 @@
 # 4. make -j
 
 cmake_minimum_required(VERSION 3.10)
-
+        	
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake/modules/")
 include(ReadVersion)
 include(GoogleTest)
@@ -269,8 +269,10 @@
     # exceptions)
     if(CMAKE_SYSTEM_PROCESSOR MATCHES "^s390x" AND NOT HAS_S390X_MARCH_NATIVE)
       set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=z196")
-    elseif(NOT CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64" AND NOT HAS_ARMV8_CRC)
-      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native")
+    elsif(NOT DISABLE_MARCH_NATIVE)
+	    if(NOT CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64" AND NOT HAS_ARMV8_CRC)
+	      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native")
+	   endif()
     endif()
   endif()
 else()
@@ -462,7 +464,7 @@
 
 if(CMAKE_SYSTEM_NAME MATCHES "Cygwin")
   add_definitions(-fno-builtin-memcmp -DCYGWIN)
-elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin")
+elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin" OR CMAKE_SYSTEM_NAME MATCHES "iOS")
   add_definitions(-DOS_MACOSX)
 elseif(CMAKE_SYSTEM_NAME MATCHES "Linux")
   add_definitions(-DOS_LINUX)
diff -ruN rocksdb/env/io_posix.cc rocksdb.patched/env/io_posix.cc
--- rocksdb/env/io_posix.cc	2024-03-01 22:46:33.000000000 +0300
+++ rocksdb.patched/env/io_posix.cc	2024-03-01 22:44:28.000000000 +0300
@@ -28,7 +28,7 @@
 #include <cstdio>
 #include <cstdlib>
 #include <cstring>
-#ifdef OS_LINUX
+#if defined(OS_LINUX) || defined(OS_ANDROID)
 #include <sys/statfs.h>
 #include <sys/sysmacros.h>
 #endif
diff -ruN rocksdb/util/crc32c.cc rocksdb.patched/util/crc32c.cc
--- rocksdb/util/crc32c.cc	2024-03-01 22:46:33.000000000 +0300
+++ rocksdb.patched/util/crc32c.cc	2024-03-01 22:44:27.000000000 +0300
@@ -56,6 +56,10 @@
 bool pmull_runtime_flag = false;
 #endif
 
+#if defined(__ANDROID__) && defined(__i386__)
+#define _mm_crc32_u64 _mm_crc32_u32
+#endif
+
 namespace ROCKSDB_NAMESPACE {
 namespace crc32c {
 
diff -ruN rocksdb/util/math.h rocksdb.patched/util/math.h
--- rocksdb/util/math.h	2024-03-01 22:46:33.000000000 +0300
+++ rocksdb.patched/util/math.h	2024-03-01 22:44:27.000000000 +0300
@@ -35,9 +35,11 @@
   if constexpr (sizeof(T) <= 4) {
     return static_cast<T>(_bzhi_u32(static_cast<uint32_t>(v), nbits));
   }
-  if constexpr (sizeof(T) <= 8) {
-    return static_cast<T>(_bzhi_u64(static_cast<uint64_t>(v), nbits));
-  }
+ #if defined(__i386__)
+    if constexpr (sizeof(T) <= 8) {
+        return static_cast<T>(_bzhi_u64(static_cast<uint64_t>(v), nbits));
+    }
+#endif
 #endif
   // Newer compilers compile this down to bzhi on x86, but some older
   // ones don't, thus the need for the intrinsic above.
diff -ruN rocksdb/utilities/transactions/lock/range/range_tree/lib/portability/toku_time.h rocksdb.patched/utilities/transactions/lock/range/range_tree/lib/portability/toku_time.h
--- rocksdb/utilities/transactions/lock/range/range_tree/lib/portability/toku_time.h	2024-03-01 22:46:33.000000000 +0300
+++ rocksdb.patched/utilities/transactions/lock/range/range_tree/lib/portability/toku_time.h	2024-03-01 22:44:28.000000000 +0300
@@ -120,6 +120,12 @@
 
 #endif
 
+static inline uint64_t toku_current_time_microsec(void) {
+  struct timeval t;
+  gettimeofday(&t, NULL);
+  return t.tv_sec * (1UL * 1000 * 1000) + t.tv_usec;
+}
+
 // Get the value of tokutime for right now.  We want this to be fast, so we
 // expose the implementation as RDTSC.
 static inline tokutime_t toku_time_now(void) {
@@ -159,16 +165,11 @@
   asm volatile ("rdtime.d\t%0,$r0" : "=r" (result));
   return result;
 #else
-#error No timer implementation for this platform
+return toku_current_time_microsec();
+//#error No timer implementation for this platform
 #endif
 }
 
-static inline uint64_t toku_current_time_microsec(void) {
-  struct timeval t;
-  gettimeofday(&t, NULL);
-  return t.tv_sec * (1UL * 1000 * 1000) + t.tv_usec;
-}
-
 #if 0
 // sleep microseconds
 static inline void toku_sleep_microsec(uint64_t ms) {
